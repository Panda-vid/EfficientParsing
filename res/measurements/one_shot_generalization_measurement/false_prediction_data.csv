,pipeline_name,predicted_program,correct_program,query,difficulty,lifted instance,context,condition_id
0,abstractorMOCK_resolver(BERT_LARGE_AVG_POOLED_POSITIONAL_metric_learner_LMNN)_difficulty3,"ADD(['holiday_management'], ['total cost']); FILTER(['holiday_management'], cleaning id != ''); ADD(['holiday_management'], ['fee', 'total rent']); ASSIGN(['holiday_management'], ['total cost'])",
"ADD(['holiday_management'], ['total cost']); FILTER(['holiday_management'], cleaning id != ''); SUM(['holiday_management'], ['fee', 'total rent']); ASSIGN(['holiday_management'], ['total cost'])",Add fee to total rent where cleaning id is not empty.,3,Add [column] [table] [condition],guest_management,3
1,abstractorMOCK_resolver(BERT_LARGE_AVG_POOLED_POSITIONAL_metric_learner_LMNN)_difficulty3,"FILTER(['time_slots'], date <= today); COUNT(['time_slots'])","SELECT(['time_slots'], date >= today); COUNT(['time_slots'])",Count all rows where date is later than today.,3,Count rows [table] [condition],meeting_management,3
2,abstractorMOCK_resolver(BERT_LARGE_AVG_POOLED_POSITIONAL_metric_learner_NONE)_difficulty3,"FILTER(['time_slots'], date <= today); COUNT(['time_slots'])","SELECT(['time_slots'], date >= today); COUNT(['time_slots'])",Count all rows where date is later than today.,3,Count rows [table] [condition],meeting_management,3
3,abstractorMOCK_resolver(ELECTRA_LARGE_AVG_POOLED_POSITIONAL_metric_learner_LMNN)_difficulty3,"ADD(['holiday_management'], ['total cost']); FILTER(['holiday_management'], cleaning id != ''); ADD(['holiday_management'], ['fee', 'total rent']); ASSIGN(['holiday_management'], ['total cost'])","ADD(['holiday_management'], ['total cost']); FILTER(['holiday_management'], cleaning id != ''); SUM(['holiday_management'], ['fee', 'total rent']); ASSIGN(['holiday_management'], ['total cost'])",Add fee to total rent where cleaning id is not empty.,3,Add [column] [table] [condition],guest_management,3
4,abstractorMOCK_resolver(ELECTRA_LARGE_AVG_POOLED_POSITIONAL_metric_learner_LMNN)_difficulty3,"FILTER(['time_slots'], date <= today); COUNT(['time_slots'])","SELECT(['time_slots'], date >= today); COUNT(['time_slots'])",Count all rows where date is later than today.,3,Count rows [table] [condition],meeting_management,3
5,abstractorMOCK_resolver(ELECTRA_LARGE_AVG_POOLED_POSITIONAL_metric_learner_NONE)_difficulty3,"FILTER(['time_slots'], date <= today); COUNT(['time_slots'])","SELECT(['time_slots'], date >= today); COUNT(['time_slots'])",Count all rows where date is later than today.,3,Count rows [table] [condition],meeting_management,3
6,abstractorMOCK_resolver(BERT_SMALL_AVG_POOLED_POSITIONAL_metric_learner_LMNN)_difficulty3,"ADD(['holiday_management'], ['total cost']); FILTER(['holiday_management'], cleaning id != ''); ADD(['holiday_management'], ['fee', 'total rent']); ASSIGN(['holiday_management'], ['total cost'])","ADD(['holiday_management'], ['total cost']); FILTER(['holiday_management'], cleaning id != ''); SUM(['holiday_management'], ['fee', 'total rent']); ASSIGN(['holiday_management'], ['total cost'])",Add fee to total rent where cleaning id is not empty.,3,Add [column] [table] [condition],guest_management,3
7,abstractorMOCK_resolver(BERT_SMALL_AVG_POOLED_POSITIONAL_metric_learner_LMNN)_difficulty3,"FILTER(['time_slots'], date <= today); COUNT(['time_slots'])","SELECT(['time_slots'], date >= today); COUNT(['time_slots'])",Count all rows where date is later than today.,3,Count rows [table] [condition],meeting_management,3
8,abstractorMOCK_resolver(BERT_SMALL_AVG_POOLED_POSITIONAL_metric_learner_NONE)_difficulty3,"ADD(['holiday_management'], ['total cost']); FILTER(['holiday_management'], cleaning id != ''); ADD(['holiday_management'], ['fee', 'total rent']); ASSIGN(['holiday_management'], ['total cost'])","ADD(['holiday_management'], ['total cost']); FILTER(['holiday_management'], cleaning id != ''); SUM(['holiday_management'], ['fee', 'total rent']); ASSIGN(['holiday_management'], ['total cost'])",Add fee to total rent where cleaning id is not empty.,3,Add [column] [table] [condition],guest_management,3
9,abstractorMOCK_resolver(BERT_SMALL_AVG_POOLED_POSITIONAL_metric_learner_NONE)_difficulty3,"FILTER(['time_slots'], date <= today); COUNT(['time_slots'])","SELECT(['time_slots'], date >= today); COUNT(['time_slots'])",Count all rows where date is later than today.,3,Count rows [table] [condition],meeting_management,3
